name: Quality Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # ÊØéÊó•ÂçàÂâç9ÊôÇÔºàJSTÔºâ„Å´ÂÆüË°å
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  quality-report:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Â±•Ê≠¥ÂÖ®‰Ωì„ÇíÂèñÂæóÔºà„Éà„É¨„É≥„ÉâÂàÜÊûêÁî®Ôºâ

    - name: Setup UV environment
      uses: ./.github/actions/setup-uv-env

    - name: Install additional dependencies for quality checks
      run: |
        uv add --dev bandit safety pytest-json-report

    - name: Collect quality metrics
      id: quality
      run: |
        # ÂìÅË≥™„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜ
        uv run python main.py quality --output quality-report.json

        # ÁµêÊûú„ÇíGitHub ActionsÂá∫Âäõ„Å´Ë®≠ÂÆö
        if [ -f quality-report.json ]; then
          QUALITY_SCORE=$(cat quality-report.json | jq -r '.quality_score')
          COVERAGE=$(cat quality-report.json | jq -r '.metrics.test_coverage')
          RUFF_ISSUES=$(cat quality-report.json | jq -r '.metrics.ruff_issues')
          MYPY_ERRORS=$(cat quality-report.json | jq -r '.metrics.mypy_errors')
          SECURITY_VULNS=$(cat quality-report.json | jq -r '.metrics.security_vulnerabilities')

          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "ruff_issues=$RUFF_ISSUES" >> $GITHUB_OUTPUT
          echo "mypy_errors=$MYPY_ERRORS" >> $GITHUB_OUTPUT
          echo "security_vulnerabilities=$SECURITY_VULNS" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Generate quality badge data
      run: |
        # „Éê„ÉÉ„Ç∏Áî®„ÅÆ„Éá„Éº„Çø„ÇíÁîüÊàê
        mkdir -p badges

        QUALITY_SCORE="${{ steps.quality.outputs.quality_score }}"
        COVERAGE="${{ steps.quality.outputs.coverage }}"

        # ÂìÅË≥™„Çπ„Ç≥„Ç¢„Éê„ÉÉ„Ç∏
        if (( $(echo "$QUALITY_SCORE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$QUALITY_SCORE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$QUALITY_SCORE >= 70" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi

        echo "{\"schemaVersion\": 1, \"label\": \"quality\", \"message\": \"${QUALITY_SCORE}%\", \"color\": \"$COLOR\"}" > badges/quality.json

        # „Ç´„Éê„É¨„ÉÉ„Ç∏„Éê„ÉÉ„Ç∏
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COV_COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COV_COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COV_COLOR="yellow"
        else
          COV_COLOR="red"
        fi

        echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${COVERAGE}%\", \"color\": \"$COV_COLOR\"}" > badges/coverage.json

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report-${{ github.sha }}
        path: |
          quality-report.json
          badges/
        retention-days: 30

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          if (!fs.existsSync('quality-report.json')) {
            console.log('Quality report not found');
            return;
          }

          const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
          const metrics = report.metrics;

          const qualityScore = report.quality_score.toFixed(1);
          const coverage = metrics.test_coverage.toFixed(1);

          // ÂìÅË≥™„Çπ„Ç≥„Ç¢„ÅÆÁµµÊñáÂ≠ó
          let scoreEmoji = 'üî¥';
          if (report.quality_score >= 90) scoreEmoji = 'üü¢';
          else if (report.quality_score >= 80) scoreEmoji = 'üü°';
          else if (report.quality_score >= 70) scoreEmoji = 'üü†';

          // „Ç´„Éê„É¨„ÉÉ„Ç∏„ÅÆÁµµÊñáÂ≠ó
          let coverageEmoji = 'üî¥';
          if (metrics.test_coverage >= 90) coverageEmoji = 'üü¢';
          else if (metrics.test_coverage >= 80) coverageEmoji = 'üü°';
          else if (metrics.test_coverage >= 70) coverageEmoji = 'üü†';

          const body = `## üìä ÂìÅË≥™„É¨„Éù„Éº„Éà

          | „É°„Éà„É™„ÇØ„Çπ | ÂÄ§ | „Çπ„ÉÜ„Éº„Çø„Çπ |
          |-----------|----|-----------|
          | ÂìÅË≥™„Çπ„Ç≥„Ç¢ | ${qualityScore}% | ${scoreEmoji} |
          | „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏ | ${coverage}% | ${coverageEmoji} |
          | Ruff„Ç®„É©„Éº | ${metrics.ruff_issues}‰ª∂ | ${metrics.ruff_issues === 0 ? '‚úÖ' : '‚ùå'} |
          | MyPy„Ç®„É©„Éº | ${metrics.mypy_errors}‰ª∂ | ${metrics.mypy_errors === 0 ? '‚úÖ' : '‚ùå'} |
          | „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß | ${metrics.security_vulnerabilities}‰ª∂ | ${metrics.security_vulnerabilities === 0 ? '‚úÖ' : '‚ùå'} |
          | „ÉÜ„Çπ„ÉàÊàêÂäü | ${metrics.test_passed}‰ª∂ | ‚úÖ |
          | „ÉÜ„Çπ„ÉàÂ§±Êïó | ${metrics.test_failed}‰ª∂ | ${metrics.test_failed === 0 ? '‚úÖ' : '‚ùå'} |

          **„Ç≥„Éü„ÉÉ„Éà**: \`${report.commit_hash}\`
          **„Çø„Ç§„É†„Çπ„Çø„É≥„Éó**: ${report.timestamp}

          ${report.passing ? 'üéâ **ÂìÅË≥™Âü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ**' : '‚ö†Ô∏è **ÂìÅË≥™Âü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì**'}
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Update quality trend data
      if: github.ref == 'refs/heads/main'
      run: |
        # „Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞Ôºà„É°„Ç§„É≥„Éñ„É©„É≥„ÉÅ„ÅÆ„ÅøÔºâ
        mkdir -p quality-trends

        # Êó¢Â≠ò„ÅÆ„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
        if [ -f quality-trends/trend-data.json ]; then
          TREND_DATA=$(cat quality-trends/trend-data.json)
        else
          TREND_DATA="[]"
        fi

        # Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Éù„Ç§„É≥„Éà„ÇíËøΩÂä†
        NEW_POINT=$(cat quality-report.json | jq '{
          timestamp: .timestamp,
          commit_hash: .commit_hash,
          quality_score: .quality_score,
          coverage: .metrics.test_coverage,
          ruff_issues: .metrics.ruff_issues,
          mypy_errors: .metrics.mypy_errors,
          security_vulnerabilities: .metrics.security_vulnerabilities
        }')

        # „Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞ÔºàÊúÄÊñ∞30‰ª∂„Çí‰øùÊåÅÔºâ
        echo "$TREND_DATA" | jq ". + [$NEW_POINT] | sort_by(.timestamp) | .[-30:]" > quality-trends/trend-data.json

    - name: Generate trend visualization
      if: github.ref == 'refs/heads/main'
      run: |
        # Á∞°Âçò„Å™HTML„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
        cat > quality-trends/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>ÂìÅË≥™„Éà„É¨„É≥„Éâ</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <meta charset="UTF-8">
        </head>
        <body>
            <h1>ÂìÅË≥™„É°„Éà„É™„ÇØ„Çπ„Éà„É¨„É≥„Éâ</h1>
            <div style="width: 800px; height: 400px;">
                <canvas id="qualityChart"></canvas>
            </div>
            <div style="width: 800px; height: 400px;">
                <canvas id="coverageChart"></canvas>
            </div>

            <script>
            fetch('trend-data.json')
                .then(response => response.json())
                .then(data => {
                    const labels = data.map(d => new Date(d.timestamp).toLocaleDateString('ja-JP'));

                    // ÂìÅË≥™„Çπ„Ç≥„Ç¢„ÉÅ„É£„Éº„Éà
                    new Chart(document.getElementById('qualityChart'), {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'ÂìÅË≥™„Çπ„Ç≥„Ç¢',
                                data: data.map(d => d.quality_score),
                                borderColor: 'rgb(75, 192, 192)',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: true,
                                    text: 'ÂìÅË≥™„Çπ„Ç≥„Ç¢„Éà„É¨„É≥„Éâ'
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100
                                }
                            }
                        }
                    });

                    // „Ç´„Éê„É¨„ÉÉ„Ç∏„ÉÅ„É£„Éº„Éà
                    new Chart(document.getElementById('coverageChart'), {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: '„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏',
                                data: data.map(d => d.coverage),
                                borderColor: 'rgb(255, 99, 132)',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: true,
                                    text: '„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„Éà„É¨„É≥„Éâ'
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 100
                                }
                            }
                        }
                    });
                });
            </script>
        </body>
        </html>
        EOF

    - name: Upload trend data
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: quality-trends
        path: quality-trends/
        retention-days: 90

    - name: Fail if quality standards not met
      if: steps.quality.outputs.quality_score != '' && steps.quality.outputs.quality_score < 70
      run: |
        echo "‚ùå ÂìÅË≥™„Çπ„Ç≥„Ç¢„ÅåÂü∫Ê∫ñÂÄ§Ôºà70%Ôºâ„Çí‰∏ãÂõû„Å£„Å¶„ÅÑ„Åæ„Åô: ${{ steps.quality.outputs.quality_score }}%"
        exit 1
