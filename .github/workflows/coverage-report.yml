name: Coverage Report

run-name: "Coverage Report - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.number) || github.event_name == 'workflow_dispatch' && 'Manual' || format('{0} ({1})', github.ref_name, substring(github.sha, 0, 7)) }}"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 履歴比較のため全履歴を取得

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Install dependencies
        run: uv sync --dev

      - name: Run comprehensive coverage analysis
        run: |
          echo "🔍 包括的カバレッジ分析を実行中..."

          # 基本的なカバレッジレポート生成（テスト失敗時は即座に終了）
          echo "🧪 テスト実行とカバレッジ測定を開始します"

          if ! uv run pytest tests/ \
            --cov=src/setup_repo \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=json \
            --junit-xml=test-results.xml \
            -v; then
            echo "❌ テストが失敗しました"
            exit 1
          fi

          echo "✅ テストが成功しました"

          # カバレッジファイルが生成されているかチェック
          if [ -f "coverage.xml" ] && [ -f "coverage.json" ]; then
            echo "✅ カバレッジレポートが正常に生成されました"
          else
            echo "❌ カバレッジレポートの生成に失敗しました"
            exit 1
          fi

          # カバレッジ監視システムを使用してレポート生成
          if ! uv run python scripts/coverage-monitor.py --generate-report; then
            echo "❌ カバレッジ監視システムでエラーが発生しました"
            exit 1
          fi

          echo "✅ カバレッジ分析が完了しました"

      - name: Generate coverage summary
        if: always()  # テスト失敗時でも実行
        run: |
          echo "📊 カバレッジサマリー生成中..."

          # カバレッジ監視システムから詳細レポートを生成
          uv run python scripts/coverage-monitor.py --analyze-trends > trends.txt || echo "トレンド分析データが不足しています" > trends.txt

          # 基本的なカバレッジ情報をcoverage.jsonから取得
          if [ -f "coverage.json" ]; then
            echo "📋 基本カバレッジレポートから情報を生成中..."

            cat > coverage-summary.md << 'EOF'
          # 📊 カバレッジレポート

          ## 全体サマリー
          EOF

            # coverage.jsonから基本情報を抽出
            uv run python -c "
          import json
          import sys
          from datetime import datetime

          try:
              with open('coverage.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)

              total_coverage = data['totals']['percent_covered']
              total_statements = data['totals']['num_statements']
              covered_statements = data['totals']['covered_lines']
              missing_statements = data['totals']['missing_lines']

              print(f'**全体カバレッジ**: {total_coverage:.2f}%')
              print(f'**総ステートメント数**: {total_statements}')
              print(f'**カバー済み**: {covered_statements}')
              print(f'**未カバー**: {missing_statements}')
              print(f'**生成日時**: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
              print()

              # 品質ゲートチェック
              if total_coverage >= 80:
                  print('✅ **品質ゲート**: 通過 (80%以上)')
              elif total_coverage >= 70:
                  print('⚠️ **品質ゲート**: 警告 (70%以上、80%未満)')
              else:
                  print('❌ **品質ゲート**: 未達成 (70%未満)')

              print()
              print('## ファイル別カバレッジ')
              print()

              # ファイル別カバレッジを表示
              files = data.get('files', {})
              for filepath, file_data in sorted(files.items()):
                  if 'src/setup_repo' in filepath:
                      filename = filepath.split('/')[-1]
                      file_coverage = file_data['summary']['percent_covered']
                      status = '✅' if file_coverage >= 90 else '⚠️' if file_coverage >= 70 else '❌'
                      print(f'{status} **{filename}**: {file_coverage:.2f}%')

          except Exception as e:
              print(f'基本レポート解析エラー: {e}')
              print('カバレッジファイルの解析に失敗しましたが、処理を継続します')
          " >> coverage-summary.md

            echo "" >> coverage-summary.md
            echo "## トレンド分析" >> coverage-summary.md
            cat trends.txt >> coverage-summary.md

          else
            # 最新のカバレッジレポートを取得（フォールバック）
            LATEST_REPORT=$(ls -t coverage-reports/coverage_report_*.json 2>/dev/null | head -n1)

            if [ -f "$LATEST_REPORT" ]; then
              echo "📋 詳細カバレッジレポートから情報を生成中..."

              cat > coverage-summary.md << 'EOF'
          # 📊 カバレッジレポート

          ## 全体サマリー
          EOF

              # 詳細レポートから情報を抽出
              uv run python -c "
          import json
          import sys

          try:
              with open('$LATEST_REPORT', 'r', encoding='utf-8') as f:
                  data = json.load(f)

              coverage = data['coverage']
              req_check = data['requirements_check']
              summary = data['summary']

              print(f\"**全体カバレッジ**: {coverage['total_coverage']:.2f}%\")
              print(f\"**モジュール数**: {summary['total_modules']}\")
              print(f\"**目標達成モジュール**: {summary['modules_above_target']}/{summary['total_modules']}\")
              print(f\"**重要モジュール目標達成**: {summary['critical_modules_above_target']}\")
              print()

              if req_check['passed']:
                  print('✅ **品質ゲート**: 通過')
              else:
                  print('❌ **品質ゲート**: 未達成')
                  print()
                  print('**警告:**')
                  for warning in req_check['warnings']:
                      print(f'- {warning}')

              print()
              print('## モジュール別カバレッジ')
              print()
              for module, cov in sorted(coverage['module_coverage'].items()):
                  status = '✅' if cov >= 80 else '⚠️' if cov >= 60 else '❌'
                  print(f'{status} **{module}**: {cov:.2f}%')

          except Exception as e:
              print(f'詳細レポート解析エラー: {e}')
              print('詳細レポートの解析に失敗しましたが、処理を継続します')
          " >> coverage-summary.md

              echo "" >> coverage-summary.md
              echo "## トレンド分析" >> coverage-summary.md
              cat trends.txt >> coverage-summary.md
            else
              echo "# 📊 カバレッジレポート" > coverage-summary.md
              echo "" >> coverage-summary.md
              echo "⚠️ カバレッジレポートファイルが見つかりませんでした。" >> coverage-summary.md
              echo "テストの実行に問題があった可能性があります。" >> coverage-summary.md
            fi
          fi

          echo "📋 カバレッジサマリーが生成されました"
          cat coverage-summary.md

      - name: Check coverage trend
        if: github.event_name == 'pull_request'

        run: |
          echo "📈 カバレッジトレンド分析中..."

          # ベースブランチのカバレッジと比較（エラー処理を強化）
          set +e  # エラーで停止しない

          # 現在のブランチを保存
          CURRENT_BRANCH=${{ github.event.pull_request.head.sha }}

          # ベースブランチに切り替え
          if git checkout ${{ github.event.pull_request.base.sha }}; then
            echo "✅ ベースブランチに切り替えました"

            # ベースブランチでテスト実行
            echo "📋 ベースブランチでカバレッジ測定中..."
            if ! uv run pytest tests/ --cov=src/setup_repo --cov-report=json:base-coverage.json -x --tb=no -q; then
              echo "⚠️ ベースブランチのテストでエラーが発生しました（比較をスキップします）"
              echo "comparison-skipped=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            # 現在のブランチに戻る
            if git checkout $CURRENT_BRANCH; then
              echo "✅ 現在のブランチに戻りました"

              # カバレッジ比較スクリプト実行
              if [ -f "base-coverage.json" ] && [ -f "coverage.json" ]; then
                echo "📈 カバレッジ比較を実行中..."

                cat > compare_coverage.py << 'EOF'
          import json
          import sys

          try:
              with open('base-coverage.json', 'r') as f:
                  base_cov = json.load(f)
              with open('coverage.json', 'r') as f:
                  current_cov = json.load(f)

              base_percent = base_cov['totals']['percent_covered']
              current_percent = current_cov['totals']['percent_covered']
              diff = current_percent - base_percent

              print(f"ベースブランチ: {base_percent:.2f}%")
              print(f"現在のブランチ: {current_percent:.2f}%")
              print(f"差分: {diff:+.2f}%")

              if diff >= 0:
                  print("✅ カバレッジが向上または維持されています")
              else:
                  print("⚠️ カバレッジが低下しています")
                  if abs(diff) > 5:
                      print("❌ カバレッジが5%以上低下しています")
                      print("::warning::カバレッジが大幅に低下していますが、ワークフローは継続します")
                      # sys.exit(1) をコメントアウトしてワークフローを継続

              # トレンド情報をファイルに保存
              with open('coverage-trend.txt', 'w') as f:
                  f.write(f"ベースブランチ: {base_percent:.2f}%\\n")
                  f.write(f"現在のブランチ: {current_percent:.2f}%\\n")
                  f.write(f"差分: {diff:+.2f}%\\n")

          except Exception as e:
              print(f"カバレッジ比較に失敗: {e}")
              print("トレンド分析をスキップします")
              with open('coverage-trend.txt', 'w') as f:
                  f.write("トレンド分析データが利用できません\\n")
          EOF

                uv run python compare_coverage.py
              else
                echo "⚠️ カバレッジファイルが不足しているため、比較をスキップします"
                echo "トレンド分析データが利用できません" > coverage-trend.txt
              fi
            else
              echo "❌ 現在のブランチに戻ることができませんでした"
              echo "トレンド分析データが利用できません" > coverage-trend.txt
            fi
          else
            echo "❌ ベースブランチに切り替えることができませんでした"
            echo "トレンド分析データが利用できません" > coverage-trend.txt
          fi

          set -e  # エラーで停止を再有効化
          echo "📈 トレンド分析が完了しました"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
            coverage.json
            coverage-summary.md
            test-results.xml
            coverage-reports/
            coverage_badge.json
            coverage_alert.txt
            coverage-trend.txt
            trends.txt
          retention-days: 30

      - name: Publish coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('coverage-summary.md', 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
              console.log('カバレッジサマリーを投稿しました');
            } catch (error) {
              console.log('カバレッジサマリーの投稿をスキップしました:', error.message);
            }

  coverage-badge:
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    needs: coverage-analysis
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate coverage and badge
        run: |
          # カバレッジ監視システムを使用してレポート生成
          uv run python scripts/coverage-monitor.py --generate-report

          # バッジ情報を取得
          if [ -f "coverage_badge.json" ]; then
            COVERAGE=$(uv run python -c "import json; data=json.load(open('coverage_badge.json')); print(data['message'].replace('%', ''))")
            COLOR=$(uv run python -c "import json; data=json.load(open('coverage_badge.json')); print(data['color'])")

            # バッジURL生成
            BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"
            echo "Coverage badge URL: $BADGE_URL"
            echo "COVERAGE_BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
          else
            echo "バッジ情報ファイルが見つかりません"
            exit 1
          fi

      - name: Comment coverage badge
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const badgeUrl = process.env.COVERAGE_BADGE_URL;
              const body = `## 📊 カバレッジバッジ更新\n\n![Coverage](${badgeUrl})\n\nバッジURL: \`${badgeUrl}\``;

              // 最新のコミットにコメント
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: body
              });
              console.log('カバレッジバッジコメントを投稿しました');
            } catch (error) {
              console.log('コメント投稿をスキップしました:', error.message);
            }
