name: Coverage Report

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 履歴比較のため全履歴を取得

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Install dependencies
        run: uv sync --dev

      - name: Run comprehensive coverage analysis
        run: |
          echo "🔍 包括的カバレッジ分析を実行中..."

          # カバレッジ監視システムを使用してレポート生成
          uv run python scripts/coverage-monitor.py --generate-report

          # 追加のJUnitレポート生成
          uv run pytest tests/ --junit-xml=test-results.xml -v

      - name: Generate coverage summary
        run: |
          echo "📊 カバレッジサマリー生成中..."

          # カバレッジ監視システムから詳細レポートを生成
          uv run python scripts/coverage-monitor.py --analyze-trends > trends.txt || echo "トレンド分析データが不足しています" > trends.txt

          # 最新のカバレッジレポートを取得
          LATEST_REPORT=$(ls -t coverage-reports/coverage_report_*.json 2>/dev/null | head -n1)

          if [ -f "$LATEST_REPORT" ]; then
            # JSONレポートからMarkdownサマリーを生成
            cat > coverage-summary.md << 'EOF'
          # 📊 カバレッジレポート

          ## 全体サマリー
          EOF

            # カバレッジデータを抽出してMarkdownに変換
            uv run python -c "
          import json
          import sys

          try:
              with open('$LATEST_REPORT', 'r', encoding='utf-8') as f:
                  data = json.load(f)

              coverage = data['coverage']
              req_check = data['requirements_check']
              summary = data['summary']

              print(f\"**全体カバレッジ**: {coverage['total_coverage']:.2f}%\")
              print(f\"**モジュール数**: {summary['total_modules']}\")
              print(f\"**目標達成モジュール**: {summary['modules_above_target']}/{summary['total_modules']}\")
              print(f\"**重要モジュール目標達成**: {summary['critical_modules_above_target']}\")
              print()

              if req_check['passed']:
                  print('✅ **品質ゲート**: 通過')
              else:
                  print('❌ **品質ゲート**: 未達成')
                  print()
                  print('**警告:**')
                  for warning in req_check['warnings']:
                      print(f'- {warning}')

              print()
              print('## モジュール別カバレッジ')
              print()
              for module, cov in sorted(coverage['module_coverage'].items()):
                  status = '✅' if cov >= 80 else '⚠️' if cov >= 60 else '❌'
                  print(f'{status} **{module}**: {cov:.2f}%')

          except Exception as e:
              print(f'レポート解析エラー: {e}')
              sys.exit(1)
          " >> coverage-summary.md

            echo "" >> coverage-summary.md
            echo "## トレンド分析" >> coverage-summary.md
            cat trends.txt >> coverage-summary.md
          else
            echo "カバレッジレポートが見つかりません" > coverage-summary.md
          fi

      - name: Check coverage trend
        if: github.event_name == 'pull_request'
        run: |
          echo "📈 カバレッジトレンド分析中..."

          # ベースブランチのカバレッジと比較
          git checkout ${{ github.event.pull_request.base.sha }}

          # ベースブランチでテスト実行（エラーは無視）
          uv run pytest tests/ --cov=src/setup_repo --cov-report=json:base-coverage.json || true

          # 現在のブランチに戻る
          git checkout ${{ github.event.pull_request.head.sha }}

          # カバレッジ比較スクリプト実行
          cat > compare_coverage.py << 'EOF'
          import json
          import sys

          try:
              with open('base-coverage.json', 'r') as f:
                  base_cov = json.load(f)
              with open('coverage.json', 'r') as f:
                  current_cov = json.load(f)

              base_percent = base_cov['totals']['percent_covered']
              current_percent = current_cov['totals']['percent_covered']
              diff = current_percent - base_percent

              print(f"ベースブランチ: {base_percent:.2f}%")
              print(f"現在のブランチ: {current_percent:.2f}%")
              print(f"差分: {diff:+.2f}%")

              if diff >= 0:
                  print("✅ カバレッジが向上または維持されています")
              else:
                  print("⚠️ カバレッジが低下しています")
                  if abs(diff) > 5:
                      print("❌ カバレッジが5%以上低下しています")
                      sys.exit(1)
          except Exception as e:
              print(f"カバレッジ比較に失敗: {e}")
          EOF

          uv run python compare_coverage.py

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
            coverage.json
            coverage-summary.md
            test-results.xml
            coverage-reports/
            coverage_badge.json
            coverage_alert.txt
          retention-days: 30

      - name: Publish coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('coverage-summary.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('カバレッジサマリーの投稿に失敗:', error);
            }

  coverage-badge:
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    needs: coverage-analysis
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Install dependencies
        run: uv sync --dev

      - name: Generate coverage and badge
        run: |
          # カバレッジ監視システムを使用してレポート生成
          uv run python scripts/coverage-monitor.py --generate-report

          # バッジ情報を取得
          if [ -f "coverage_badge.json" ]; then
            COVERAGE=$(uv run python -c "import json; data=json.load(open('coverage_badge.json')); print(data['message'].replace('%', ''))")
            COLOR=$(uv run python -c "import json; data=json.load(open('coverage_badge.json')); print(data['color'])")

            # バッジURL生成
            BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"
            echo "Coverage badge URL: $BADGE_URL"
            echo "COVERAGE_BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
          else
            echo "バッジ情報ファイルが見つかりません"
            exit 1
          fi

      - name: Comment coverage badge
        uses: actions/github-script@v7
        with:
          script: |
            const badgeUrl = process.env.COVERAGE_BADGE_URL;
            const body = `## 📊 カバレッジバッジ更新\n\n![Coverage](${badgeUrl})\n\nバッジURL: \`${badgeUrl}\``;

            // 最新のコミットにコメント
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
