# 🚀 自動リリース管理ワークフロー
# タグベースの自動リリース、CHANGELOG更新、バージョン一貫性チェック、GitHub Releases作成

name: 🚀 Release Management

run-name: "🚀 Release v${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }} - ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Tag Push' }}"

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v1.2.3-beta.1 などのセマンティックバージョンタグ
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (例: 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'プレリリースとしてマーク'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  # バージョン番号の一貫性チェック
  version-consistency-check:
    name: 🔍 バージョン一貫性チェック
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（CHANGELOG生成のため）

      - name: 🐍 Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 uvをインストール
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: 📦 必要なパッケージをインストール
        run: |
          python -m pip install tomli

      - name: 🔍 バージョン情報を抽出
        id: extract-version
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
          INPUT_PRERELEASE: ${{ github.event.inputs.prerelease }}
        run: |
          # 入力値のサニタイズとバリデーション
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 環境変数経由で安全に値を取得
            RAW_VERSION="${INPUT_VERSION}"
            VERSION=$(echo "$RAW_VERSION" | sed 's/[^a-zA-Z0-9.-]//g')

            # バージョン形式の検証
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
              echo "無効なバージョン形式: $VERSION"
              exit 1
            fi

            IS_PRERELEASE="${INPUT_PRERELEASE}"
          else
            # タグからバージョンを抽出 (v1.0.0 -> 1.0.0)
            RAW_TAG="${GITHUB_REF#refs/tags/v}"
            VERSION=$(echo "$RAW_TAG" | sed 's/[^a-zA-Z0-9.-]//g')

            # プレリリースかどうかを判定 (alpha, beta, rc を含む場合)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "バージョン: $VERSION"
          echo "プレリリース: $IS_PRERELEASE"

      - name: 📋 バージョン一貫性チェックスクリプトを作成
        run: |
          cat > scripts/version-check.py << 'EOF'
          #!/usr/bin/env python3
          """バージョン番号の一貫性チェックスクリプト"""

          import sys
          import re
          from pathlib import Path
          try:
              import tomllib
          except ImportError:
              import tomli as tomllib

          def check_version_consistency(expected_version: str) -> bool:
              """各ファイルのバージョン番号が一貫しているかチェック"""
              errors = []

              # pyproject.tomlのバージョンチェック
              try:
                  with open("pyproject.toml", "rb") as f:
                      pyproject_data = tomllib.load(f)
                  pyproject_version = pyproject_data["project"]["version"]
                  if pyproject_version != expected_version:
                      errors.append(f"pyproject.toml: {pyproject_version} != {expected_version}")
              except Exception as e:
                  errors.append(f"pyproject.toml読み込みエラー: {e}")

              # __init__.pyのバージョンチェック
              init_file = Path("src/setup_repo/__init__.py")
              if init_file.exists():
                  try:
                      content = init_file.read_text(encoding="utf-8")
                      version_match = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', content)
                      if version_match:
                          init_version = version_match.group(1)
                          if init_version != expected_version:
                              errors.append(f"__init__.py: {init_version} != {expected_version}")
                      else:
                          errors.append("__init__.py: __version__が見つかりません")
                  except Exception as e:
                      errors.append(f"__init__.py読み込みエラー: {e}")

              if errors:
                  print("❌ バージョン不整合が検出されました:")
                  for error in errors:
                      print(f"  - {error}")
                  return False
              else:
                  print(f"✅ バージョン一貫性チェック完了: {expected_version}")
                  return True

          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("使用法: python version-check.py <expected_version>")
                  sys.exit(1)

              expected_version = sys.argv[1]
              if not check_version_consistency(expected_version):
                  sys.exit(1)
          EOF

          chmod +x scripts/version-check.py

      - name: ✅ バージョン一貫性を検証
        env:
          VERSION: ${{ steps.extract-version.outputs.version }}
        run: |
          python scripts/version-check.py "$VERSION"

  # 品質チェック（既存のCIワークフローを再利用）
  quality-check:
    name: 🔍 品質チェック
    needs: version-consistency-check
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    permissions:
      actions: read
      checks: write
      contents: read
      pull-requests: write

  # CHANGELOG.mdの自動更新
  update-changelog:
    name: 📝 CHANGELOG更新
    runs-on: ubuntu-latest
    needs: [version-consistency-check, quality-check]
    outputs:
      changelog-updated: ${{ steps.update-changelog.outputs.updated }}

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📝 CHANGELOG更新スクリプトを作成
        run: |
          cat > scripts/update-changelog.py << 'EOF'
          #!/usr/bin/env python3
          """CHANGELOG.mdの自動更新スクリプト"""

          import sys
          import re
          from datetime import datetime
          from pathlib import Path
          import subprocess

          def get_git_commits_since_last_tag(version: str) -> list[str]:
              """前回のタグ以降のコミットメッセージを取得"""
              try:
                  # 前回のタグを取得
                  result = subprocess.run(
                      ["git", "describe", "--tags", "--abbrev=0", "HEAD~1"],
                      capture_output=True, text=True, check=False
                  )

                  if result.returncode == 0:
                      last_tag = result.stdout.strip()
                      # 前回のタグ以降のコミットを取得
                      result = subprocess.run(
                          ["git", "log", f"{last_tag}..HEAD", "--pretty=format:%s"],
                          capture_output=True, text=True, check=True
                      )
                  else:
                      # 初回リリースの場合、全コミットを取得
                      result = subprocess.run(
                          ["git", "log", "--pretty=format:%s"],
                          capture_output=True, text=True, check=True
                      )

                  commits = [line.strip() for line in result.stdout.split('\n') if line.strip()]
                  return commits
              except subprocess.CalledProcessError:
                  return []

          def categorize_commits(commits: list[str]) -> dict[str, list[str]]:
              """コミットメッセージをカテゴリ別に分類"""
              categories = {
                  "✨ 追加": [],
                  "🔄 変更": [],
                  "🐛 修正": [],
                  "🗑️ 削除": [],
                  "📚 ドキュメント": [],
                  "🔧 その他": []
              }

              for commit in commits:
                  # コミットメッセージのパターンマッチング
                  if re.match(r'^(feat|add|new):', commit, re.IGNORECASE):
                      categories["✨ 追加"].append(commit)
                  elif re.match(r'^(fix|bug):', commit, re.IGNORECASE):
                      categories["🐛 修正"].append(commit)
                  elif re.match(r'^(change|update|modify):', commit, re.IGNORECASE):
                      categories["🔄 変更"].append(commit)
                  elif re.match(r'^(remove|delete):', commit, re.IGNORECASE):
                      categories["🗑️ 削除"].append(commit)
                  elif re.match(r'^(doc|docs):', commit, re.IGNORECASE):
                      categories["📚 ドキュメント"].append(commit)
                  elif any(keyword in commit.lower() for keyword in ['feat', 'add', 'new', '追加', '新規']):
                      categories["✨ 追加"].append(commit)
                  elif any(keyword in commit.lower() for keyword in ['fix', 'bug', '修正', 'バグ']):
                      categories["🐛 修正"].append(commit)
                  elif any(keyword in commit.lower() for keyword in ['change', 'update', '変更', '更新']):
                      categories["🔄 変更"].append(commit)
                  elif any(keyword in commit.lower() for keyword in ['doc', 'readme', 'ドキュメント']):
                      categories["📚 ドキュメント"].append(commit)
                  else:
                      categories["🔧 その他"].append(commit)

              return categories

          def update_changelog(version: str, is_prerelease: bool) -> bool:
              """CHANGELOG.mdを更新"""
              changelog_path = Path("CHANGELOG.md")

              if not changelog_path.exists():
                  print("CHANGELOG.mdが存在しません。新規作成します。")
                  changelog_content = "# 📝 変更履歴\n\n"
              else:
                  changelog_content = changelog_path.read_text(encoding="utf-8")

              # 既に同じバージョンのエントリが存在するかチェック
              if f"## [{version}]" in changelog_content:
                  print(f"バージョン {version} は既にCHANGELOGに存在します。")
                  return False

              # コミット履歴を取得してカテゴリ分け
              commits = get_git_commits_since_last_tag(version)
              if not commits:
                  print("新しいコミットが見つかりません。")
                  return False

              categories = categorize_commits(commits)

              # 新しいエントリを作成
              today = datetime.now().strftime("%Y-%m-%d")
              prerelease_tag = " (プレリリース)" if is_prerelease else ""
              new_entry = f"\n## [{version}]{prerelease_tag} - {today}\n\n"

              # カテゴリ別にエントリを追加
              for category, items in categories.items():
                  if items:
                      new_entry += f"### {category}\n"
                      for item in items:
                          # コミットメッセージをクリーンアップ
                          clean_item = re.sub(r'^(feat|fix|add|change|update|doc|docs):\s*', '', item, flags=re.IGNORECASE)
                          new_entry += f"- {clean_item}\n"
                      new_entry += "\n"

              # CHANGELOGに新しいエントリを挿入
              lines = changelog_content.split('\n')
              header_found = False
              insert_index = len(lines)

              for i, line in enumerate(lines):
                  if line.startswith('# ') and not header_found:
                      header_found = True
                      continue
                  if header_found and (line.startswith('## ') or i == len(lines) - 1):
                      insert_index = i
                      break

              # 新しいエントリを挿入
              lines.insert(insert_index, new_entry.rstrip())
              updated_content = '\n'.join(lines)

              # ファイルに書き込み
              changelog_path.write_text(updated_content, encoding="utf-8")
              print(f"✅ CHANGELOG.mdを更新しました (バージョン: {version})")
              return True

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("使用法: python update-changelog.py <version> <is_prerelease>")
                  sys.exit(1)

              version = sys.argv[1]
              is_prerelease = sys.argv[2].lower() == "true"

              if update_changelog(version, is_prerelease):
                  print("updated=true")
              else:
                  print("updated=false")
          EOF

          chmod +x scripts/update-changelog.py

      - name: 📝 CHANGELOGを更新
        id: update-changelog
        env:
          VERSION: ${{ needs.version-consistency-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-consistency-check.outputs.is-prerelease }}
        run: |
          result=$(python scripts/update-changelog.py "$VERSION" "$IS_PRERELEASE")
          echo "updated=${result##*=}" >> $GITHUB_OUTPUT

      - name: 💾 CHANGELOG変更をコミット
        if: steps.update-changelog.outputs.updated == 'true'
        env:
          VERSION: ${{ needs.version-consistency-check.outputs.version }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "📝 CHANGELOG.mdを更新: v$VERSION"
          git push

  # GitHub Releasesの自動作成
  create-github-release:
    name: 🚀 GitHub Release作成
    runs-on: ubuntu-latest
    needs: [version-consistency-check, quality-check, update-changelog]

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 uvをインストール
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: 🏗️ パッケージをビルド
        run: |
          uv sync --dev
          uv build

      - name: 📋 リリースノートを生成
        id: release-notes
        run: |
          cat > scripts/generate-release-notes.py << 'EOF'
          #!/usr/bin/env python3
          """リリースノート生成スクリプト"""

          import sys
          import re
          from pathlib import Path

          def extract_changelog_section(version: str) -> str:
              """CHANGELOG.mdから指定バージョンのセクションを抽出"""
              changelog_path = Path("CHANGELOG.md")

              if not changelog_path.exists():
                  return f"バージョン {version} のリリースです。"

              content = changelog_path.read_text(encoding="utf-8")
              lines = content.split('\n')

              # バージョンセクションを探す
              start_index = None
              end_index = None

              for i, line in enumerate(lines):
                  if f"## [{version}]" in line:
                      start_index = i + 1
                  elif start_index is not None and line.startswith('## ['):
                      end_index = i
                      break

              if start_index is None:
                  return f"バージョン {version} のリリースです。"

              if end_index is None:
                  end_index = len(lines)

              # セクションの内容を抽出
              section_lines = lines[start_index:end_index]
              section_content = '\n'.join(section_lines).strip()

              if not section_content:
                  return f"バージョン {version} のリリースです。"

              return section_content

          def generate_release_notes(version: str, is_prerelease: bool) -> str:
              """リリースノートを生成"""
              changelog_section = extract_changelog_section(version)

              prerelease_notice = ""
              if is_prerelease:
                  prerelease_notice = """
          > **⚠️ プレリリース版です**
          > このバージョンはテスト目的であり、本番環境での使用は推奨されません。

          """

              release_notes = f"""# 🚀 Setup Repository v{version}

          {prerelease_notice}## 📋 変更内容

          {changelog_section}

          ## 📦 インストール方法

          ### 🐍 Pythonパッケージとして
          ```bash
          pip install setup-repository
          ```

          ### 📥 ソースからインストール
          ```bash
          git clone https://github.com/scottlz0310/Setup-Repository.git
          cd Setup-Repository
          uv sync --dev
          uv run main.py setup
          ```

          ## 🔧 使用方法

          ```bash
          # 初期セットアップ
          setup-repo setup

          # リポジトリ同期
          setup-repo sync

          # ドライランモード
          setup-repo sync --dry-run
          ```

          ## 🌐 サポートプラットフォーム

          - ✅ Windows (Scoop, Winget, Chocolatey)
          - ✅ Linux (Snap, APT)
          - ✅ WSL (Linux互換)
          - ✅ macOS (Homebrew)

          ## 🐍 Python要件

          - Python 3.9以上
          - 対応バージョン: 3.9, 3.10, 3.11, 3.12, 3.13

          ---

          **完全な変更履歴**: [CHANGELOG.md](https://github.com/scottlz0310/Setup-Repository/blob/main/CHANGELOG.md)
          """

              return release_notes

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("使用法: python generate-release-notes.py <version> <is_prerelease>")
                  sys.exit(1)

              version = sys.argv[1]
              is_prerelease = sys.argv[2].lower() == "true"

              notes = generate_release_notes(version, is_prerelease)

              # GitHub Actionsの出力ファイルに書き込み
              with open("release-notes.md", "w", encoding="utf-8") as f:
                  f.write(notes)

              print("✅ リリースノートを生成しました")
          EOF

          chmod +x scripts/generate-release-notes.py

      - name: 📝 リリースノートを生成実行
        env:
          VERSION: ${{ needs.version-consistency-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-consistency-check.outputs.is-prerelease }}
        run: |
          python scripts/generate-release-notes.py "$VERSION" "$IS_PRERELEASE"

      - name: 🚀 GitHub Releaseを作成
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-consistency-check.outputs.version }}
          name: 🚀 Setup Repository v${{ needs.version-consistency-check.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.version-consistency-check.outputs.is-prerelease == 'true' }}
          draft: false
          files: |
            dist/*
            CHANGELOG.md
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 リリース完了通知
        env:
          VERSION: ${{ needs.version-consistency-check.outputs.version }}
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "🎉 リリース v$VERSION が正常に作成されました！"
          echo "📦 アセット: $(ls -la dist/)"
          echo "🔗 リリースページ: https://github.com/$REPOSITORY/releases/tag/v$VERSION"

  # リリース後のクリーンアップとメトリクス
  post-release:
    name: 🧹 リリース後処理
    runs-on: ubuntu-latest
    needs: [version-consistency-check, create-github-release]
    if: always() && needs.create-github-release.result == 'success'

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: 📊 リリースメトリクスを記録
        env:
          VERSION: ${{ needs.version-consistency-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-consistency-check.outputs.is-prerelease }}
          COMMIT_SHA: ${{ github.sha }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "📊 リリースメトリクス:"
          echo "  - バージョン: $VERSION"
          echo "  - プレリリース: $IS_PRERELEASE"
          echo "  - リリース日時: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - コミットハッシュ: $COMMIT_SHA"
          echo "  - トリガー: $EVENT_NAME"

      - name: 🏷️ 次回開発バージョンの準備
        if: needs.version-consistency-check.outputs.is-prerelease == 'false'
        run: |
          echo "🔄 次回開発バージョンの準備を開始..."
          # 将来的にはここで開発ブランチの作成や次期バージョンの準備を行う
          echo "✅ 次回開発バージョンの準備完了"
