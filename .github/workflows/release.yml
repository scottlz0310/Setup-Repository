# 🚀 自動リリース管理ワークフロー
# version-manager.pyを使用した統合リリースプロセス

name: 🚀 Release Management

run-name: "🚀 Release v${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }} - ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Tag Push' }}"

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v1.2.3-beta.1 などのセマンティックバージョンタグ
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (例: 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'プレリリースとしてマーク'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  # バージョン一貫性チェック
  version-check:
    name: 🔍 バージョン一貫性チェック
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 uvをインストール
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: 📦 依存関係をインストール
        run: |
          uv sync --dev
          # tomli-wとtomliが確実にインストールされるようにする
          uv add tomli-w tomli --dev || echo "tomli dependencies already installed"

      - name: 🔍 バージョン情報を抽出
        id: extract-version
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
          INPUT_PRERELEASE: ${{ github.event.inputs.prerelease }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${INPUT_VERSION}"
            IS_PRERELEASE="${INPUT_PRERELEASE}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "バージョン: $VERSION"
          echo "プレリリース: $IS_PRERELEASE"

      - name: ✅ バージョン一貫性チェック
        run: |
          echo "🔍 version-manager.pyでバージョン一貫性をチェック"
          if ! uv run python scripts/version-manager.py --check; then
            echo "❌ バージョン一貫性チェックに失敗しました"
            echo "📝 現在のファイル状態:"
            ls -la pyproject.toml src/setup_repo/__init__.py 2>/dev/null || echo "ファイルが見つかりません"
            exit 1
          fi

  # 品質チェック
  quality-check:
    name: 🔍 品質チェック
    needs: version-check
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    permissions:
      actions: read
      checks: write
      contents: read
      pull-requests: write

  # リリース作成
  create-release:
    name: 🚀 GitHub Release作成
    runs-on: ubuntu-latest
    needs: [version-check, quality-check]

    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Python環境をセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 uvをインストール
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: 📦 依存関係をインストールとビルド
        run: |
          uv sync --dev
          # tomli-wとtomliが確実にインストールされるようにする
          uv add tomli-w tomli --dev || echo "tomli dependencies already installed"
          uv build

      - name: 📝 CHANGELOG日付を更新
        env:
          VERSION: ${{ needs.version-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-check.outputs.is-prerelease }}
        run: |
          echo "📝 CHANGELOG.mdの日付を更新"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            uv run python scripts/version-manager.py --update-changelog "$VERSION" --prerelease
          else
            uv run python scripts/version-manager.py --update-changelog "$VERSION"
          fi

      - name: 📋 リリースノートを生成
        env:
          VERSION: ${{ needs.version-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-check.outputs.is-prerelease }}
        run: |
          echo "📋 リリースノートを生成"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            uv run python scripts/version-manager.py --generate-notes "$VERSION" --prerelease
          else
            uv run python scripts/version-manager.py --generate-notes "$VERSION"
          fi

      - name: 💾 CHANGELOG変更をコミット
        env:
          VERSION: ${{ needs.version-check.outputs.version }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git diff --quiet CHANGELOG.md; then
            echo "CHANGELOG.mdに変更はありません"
          else
            git add CHANGELOG.md
            git commit -m "📝 CHANGELOG.mdを更新: v$VERSION"
            git push
          fi

      - name: 🚀 GitHub Releaseを作成
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: 🚀 Setup Repository v${{ needs.version-check.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.version-check.outputs.is-prerelease == 'true' }}
          draft: false
          files: |
            dist/*
            CHANGELOG.md
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 リリース完了通知
        env:
          VERSION: ${{ needs.version-check.outputs.version }}
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "🎉 リリース v$VERSION が正常に作成されました！"
          echo "📦 アセット: $(ls -la dist/)"
          echo "🔗 リリースページ: https://github.com/$REPOSITORY/releases/tag/v$VERSION"

  # リリース後処理
  post-release:
    name: 🧹 リリース後処理
    runs-on: ubuntu-latest
    needs: [version-check, create-release]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: 📊 リリースメトリクスを記録
        env:
          VERSION: ${{ needs.version-check.outputs.version }}
          IS_PRERELEASE: ${{ needs.version-check.outputs.is-prerelease }}
          COMMIT_SHA: ${{ github.sha }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "📊 リリースメトリクス:"
          echo "  - バージョン: $VERSION"
          echo "  - プレリリース: $IS_PRERELEASE"
          echo "  - リリース日時: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - コミットハッシュ: $COMMIT_SHA"
          echo "  - トリガー: $EVENT_NAME"
