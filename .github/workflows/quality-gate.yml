name: Quality Gate

run-name: "Quality Gate - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.number) || 'Manual Check' }}"

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv --python 3.11

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: quality-gate-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          quality-gate-

    - name: Install dependencies with reproducibility check
      run: |
        # 依存再現性チェック（ルール7.2準拠）
        echo "依存関係の再現性を検証します..."
        uv sync --dev

        # ロックファイルの整合性確認
        if ! uv lock --check; then
          echo "❌ uv.lockファイルが最新ではありません"
          exit 1
        fi
        echo "✅ 依存関係の再現性が確認されました"

    - name: Run lint checks (ruff)
      run: |
        echo "=== Ruff Lint Check ==="
        uv run ruff check . --output-format=github
        echo "✅ Ruffリンティング完了"

    - name: Run format checks (ruff)
      run: |
        echo "=== Ruff Format Check ==="
        uv run ruff format --check .
        echo "✅ Ruffフォーマットチェック完了"

    - name: Run type checks (mypy)
      run: |
        echo "=== MyPy Type Check ==="
        uv run mypy src/
        echo "✅ MyPy型チェック完了"

    - name: Run tests with coverage (production requirements)
      run: |
        echo "=== Test + Coverage (80%+ required) ==="
        uv run pytest tests/ \
          --cov=src/setup_repo \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junit-xml=test-results.xml \
          --json-report \
          --json-report-file=test-report.json \
          -n auto \
          --dist=worksteal \
          --tb=short \
          -x \
          --maxfail=5
        echo "✅ テスト+カバレッジチェック完了（80%以上）"

    - name: Security scan (CodeQL/SCA/Secret scan)
      run: |
        echo "=== Security Scan ==="

        # Banditセキュリティスキャン
        if command -v bandit >/dev/null 2>&1 || uv run bandit --version >/dev/null 2>&1; then
          echo "Banditセキュリティスキャンを実行..."
          uv run bandit -r src/ -f json -o bandit-report.json || echo "Bandit警告あり（継続）"
        else
          echo "Banditが利用できません（スキップ）"
        fi

        # Safetyチェック
        if command -v safety >/dev/null 2>&1 || uv run safety --version >/dev/null 2>&1; then
          echo "Safety脆弱性チェックを実行..."
          uv run safety scan --output json --save-as safety-report.json || echo "Safety警告あり（継続）"
        else
          echo "Safetyが利用できません（スキップ）"
        fi

        echo "✅ セキュリティスキャン完了"

    - name: Secret detection check
      run: |
        echo "=== Secret Detection ==="

        # 基本的なシークレット検出パターン
        echo "基本的なシークレットパターンをチェック..."

        # APIキー、トークン、パスワードパターンの検出
        if grep -r -E "(api[_-]?key|secret[_-]?key|password|token)" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" src/ tests/ .github/ || true; then
          echo "⚠️ 潜在的なシークレットパターンが検出されました（手動確認が必要）"
        fi

        # .envファイルの存在チェック
        if find . -name ".env*" -not -path "./.git/*" | grep -v ".env.example" | head -5; then
          echo "❌ .envファイルが検出されました（コミット禁止）"
          exit 1
        fi

        echo "✅ シークレット検出チェック完了"

    - name: Upload quality gate results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-gate-results
        path: |
          test-results.xml
          test-report.json
          htmlcov/
          coverage.xml
          bandit-report.json
          safety-report.json
        retention-days: 30

    - name: Quality gate summary
      if: always()
      run: |
        echo "=== Quality Gate Summary ==="
        echo "✅ 依存再現性チェック: 完了"
        echo "✅ Ruffリンティング: 完了"
        echo "✅ Ruffフォーマット: 完了"
        echo "✅ MyPy型チェック: 完了"
        echo "✅ テスト+カバレッジ(80%+): 完了"
        echo "✅ セキュリティスキャン: 完了"
        echo "✅ シークレット検出: 完了"
        echo ""
        echo "🎉 全ての品質ゲートをクリアしました！"
