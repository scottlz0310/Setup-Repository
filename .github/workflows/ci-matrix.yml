name: Extended CI Matrix

run-name: "Extended CI Matrix - ${{ github.event_name == 'schedule' && 'Scheduled' || github.event_name == 'workflow_dispatch' && 'Manual' || github.ref_name }}"

on:
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.11,3.12,3.13'

jobs:
  extended-matrix-test:
    name: Extended Matrix Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu (LTSと最新安定版)
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          # Windows (最新安定版)
          - os: windows-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.13"
          # macOS (最新安定版)
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.13"
      fail-fast: false
      max-parallel: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv (Unix)
      if: runner.os != 'Windows'
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install uv (Windows)
      if: runner.os == 'Windows'
      run: irm https://astral.sh/uv/install.ps1 | iex
      shell: powershell

    - name: Verify uv installation
      run: |
        uv --version
        echo "uv installation verified successfully"

    - name: Set up Python ${{ matrix.python-version }}
      run: |
        uv python install ${{ matrix.python-version }} || echo "Python installation may have issues, continuing..."
        uv python pin ${{ matrix.python-version }} || echo "Python pinning failed, continuing..."

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Verify installation
      run: |
        uv run python --version
        uv run python -c "import sys; print(f'Python {sys.version}')"
        uv run python -c "from setup_repo import __version__; print(f'Package version: {__version__}')"

    - name: Run real environment tests
      run: |
        set -e
        EXIT_CODE=0

        echo "Running real environment tests (rule-compliant)..."
        # 実環境重視テストを実行（環境偽装モック不使用）
        if ! uv run pytest tests/unit/test_platform_detector_real.py tests/platform_specific/ -v --tb=short; then
          echo "❌ Real environment tests failed"
          EXIT_CODE=1
        fi

        echo "Running external dependency mock tests..."
        # 外部依存のみモックするテストを実行
        if ! uv run pytest tests/unit/test_platform_detector_external.py -v --tb=short; then
          echo "❌ External dependency tests failed"
          EXIT_CODE=1
        fi

        echo "Testing main script help..."
        if ! uv run python main.py --help; then
          echo "❌ Main script test failed"
          EXIT_CODE=1
        fi

        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Tests failed with exit code: $EXIT_CODE"
          exit $EXIT_CODE
        else
          echo "✅ All real environment tests passed successfully"
        fi

    - name: Run platform-specific tests (real environment)
      run: |
        set -e
        EXIT_CODE=0

        # プラットフォーム固有テストの実行（実環境重視）
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "Running Windows-specific real environment tests..."
          if ! uv run pytest tests/platform_specific/windows/ -v --tb=short; then
            echo "❌ Windows real environment tests failed"
            EXIT_CODE=1
          fi
          # 従来のマルチプラットフォームテストも実行
          if ! uv run pytest tests/multiplatform/ -k "windows" -v --tb=short; then
            echo "❌ Windows multiplatform tests failed"
            EXIT_CODE=1
          fi
        elif [ "${{ runner.os }}" = "Linux" ]; then
          echo "Running Linux-specific real environment tests..."
          if ! uv run pytest tests/platform_specific/linux/ -v --tb=short; then
            echo "❌ Linux real environment tests failed"
            EXIT_CODE=1
          fi
          # 従来のマルチプラットフォームテストも実行
          if ! uv run pytest tests/multiplatform/ -k "unix or linux" -v --tb=short; then
            echo "❌ Unix multiplatform tests failed"
            EXIT_CODE=1
          fi
        elif [ "${{ runner.os }}" = "macOS" ]; then
          echo "Running macOS-specific real environment tests..."
          if ! uv run pytest tests/platform_specific/macos/ -v --tb=short; then
            echo "❌ macOS real environment tests failed"
            EXIT_CODE=1
          fi
          # 従来のマルチプラットフォームテストも実行
          if ! uv run pytest tests/multiplatform/ -k "macos or unix" -v --tb=short; then
            echo "❌ macOS multiplatform tests failed"
            EXIT_CODE=1
          fi
        fi

        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Platform-specific tests failed with exit code: $EXIT_CODE"
          exit $EXIT_CODE
        else
          echo "✅ Platform-specific real environment tests passed successfully"
        fi
      shell: bash

    - name: Test platform-specific functionality
      run: |
        echo "Testing platform-specific functionality..."
        if ! uv run python -c "
        try:
            from setup_repo.platform_detector import detect_platform
            platform = detect_platform()
            print(f'Platform: {platform.name} - {platform.display_name}')
            print(f'Shell: {platform.shell}')
            print(f'Python command: {platform.python_cmd}')
            print('✅ Platform detection successful')
        except Exception as e:
            print(f'❌ Platform detection failed: {e}')
            import sys
            sys.exit(1)
        "; then
          echo "✅ Platform functionality test passed"
        else
          echo "❌ Platform functionality test failed"
          exit 1
        fi

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: extended-matrix-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv --version

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        if ! uv run pytest tests/ -m "slow" -v --tb=short; then
          echo "❌ Performance tests failed"
          exit 1
        else
          echo "✅ Performance tests passed"
        fi

    - name: Benchmark startup time
      run: |
        echo "Measuring startup time..."
        EXIT_CODE=0

        echo "Testing main script startup..."
        if ! time uv run python main.py --help > /dev/null; then
          echo "❌ Startup benchmark failed"
          EXIT_CODE=1
        fi

        echo "Testing CLI module startup..."
        if ! time uv run python -c "from setup_repo.cli import main; main(['--help'])" > /dev/null; then
          echo "❌ CLI benchmark failed"
          EXIT_CODE=1
        fi

        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ Startup benchmarks failed"
          exit $EXIT_CODE
        else
          echo "✅ Startup benchmarks completed successfully"
        fi
