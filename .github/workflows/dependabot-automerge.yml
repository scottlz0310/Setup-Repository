name: Dependabot Auto-merge

run-name: "Dependabot Auto-merge - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.number) || 'Check' }}"

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  dependabot-auto-merge:
    name: Dependabot Auto-merge
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Analyze update type and security impact
        id: security-check
        run: |
          echo "=== Dependabot更新分析 ==="
          echo "依存関係: ${{ steps.metadata.outputs.dependency-names }}"
          echo "更新タイプ: ${{ steps.metadata.outputs.update-type }}"
          echo "アラート状態: ${{ steps.metadata.outputs.alert-state }}"

          is_security_update=false
          auto_merge_eligible=false

          # セキュリティ更新の判定
          if [[ "${{ steps.metadata.outputs.alert-state }}" == "OPEN" ]] || \
             [[ "${{ steps.metadata.outputs.alert-state }}" == "FIXED" ]]; then
            is_security_update=true
            echo "🚨 セキュリティ更新が検出されました"
          fi

          # 更新タイプによる自動マージ判定
          case "${{ steps.metadata.outputs.update-type }}" in
            "version-update:semver-patch"|"version-update:semver-minor")
              auto_merge_eligible=true
              echo "✅ パッチ/マイナー更新: 自動マージ対象"
              ;;
            "version-update:semver-major")
              auto_merge_eligible=false
              echo "⚠️ メジャー更新: 手動レビュー必要"
              ;;
          esac

          # セキュリティ更新は優先的に自動マージ
          if [[ "$is_security_update" == "true" ]]; then
            auto_merge_eligible=true
            echo "🔒 セキュリティ更新のため自動マージを有効化"
          fi

          echo "is-security=$is_security_update" >> $GITHUB_OUTPUT
          echo "auto-merge=$auto_merge_eligible" >> $GITHUB_OUTPUT

      - name: Setup UV environment for testing
        if: steps.security-check.outputs.auto-merge == 'true'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
          uv python install ${{ env.PYTHON_VERSION }}
          uv venv --python ${{ env.PYTHON_VERSION }}
          uv sync --dev

      - name: Run compatibility tests
        if: steps.security-check.outputs.auto-merge == 'true'
        run: |
          echo "=== 依存関係互換性テスト実行 ==="
          export PATH="$HOME/.cargo/bin:$PATH"

          uv run python -c "
          import sys
          try:
              import setup_repo
              print('✅ setup_repo モジュールのインポート成功')
          except ImportError as e:
              print(f'❌ setup_repo モジュールのインポート失敗: {e}')
              sys.exit(1)
          "

      - name: Wait for required checks
        if: steps.security-check.outputs.auto-merge == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Cross-platform Tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success,neutral

      - name: Auto-approve and merge PR
        if: steps.security-check.outputs.auto-merge == 'true'
        run: |
          if [[ "${{ steps.security-check.outputs.is-security }}" == "true" ]]; then
            approval_message="🔒 **セキュリティ更新の自動承認**

            このPRはセキュリティ脆弱性の修正を含むため、自動承認されました。

            **更新内容:**
            - 依存関係: ${{ steps.metadata.outputs.dependency-names }}
            - 更新タイプ: ${{ steps.metadata.outputs.update-type }}

            CIチェック通過後に自動マージされます。"
          else
            approval_message="✅ **パッチ/マイナー更新の自動承認**

            このPRは安全な更新のため、自動承認されました。

            **更新内容:**
            - 依存関係: ${{ steps.metadata.outputs.dependency-names }}
            - 更新タイプ: ${{ steps.metadata.outputs.update-type }}

            CIチェック通過後に自動マージされます。"
          fi

          gh pr review --approve "${{ github.event.pull_request.number }}" --body "$approval_message"

          gh pr merge --auto --squash "${{ github.event.pull_request.number }}" \
            --subject "deps: ${{ steps.metadata.outputs.dependency-names }}" \
            --body "Dependabotによる自動更新

          **更新タイプ:** ${{ steps.metadata.outputs.update-type }}
          **セキュリティ更新:** ${{ steps.security-check.outputs.is-security }}

          このPRは自動テストとセキュリティチェックに合格したため、自動マージされました。"

          echo "✅ 自動マージが有効化されました"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle manual review cases
        if: steps.security-check.outputs.auto-merge == 'false'
        run: |
          echo "=== 手動レビュー必要な更新の分析 ==="

          if [[ "${{ steps.security-check.outputs.is-security }}" == "true" ]]; then
            comment_body="🚨 **セキュリティ更新（メジャーバージョン）**

            この更新はセキュリティ脆弱性の修正を含みますが、メジャーバージョンアップのため手動レビューが必要です。

            **⚠️ 緊急度: HIGH - セキュリティ脆弱性あり**

            **更新内容:**
            - 依存関係: ${{ steps.metadata.outputs.dependency-names }}
            - 更新タイプ: ${{ steps.metadata.outputs.update-type }}

            セキュリティ脆弱性のため、可能な限り迅速にレビューしてマージしてください。"

            gh pr edit "${{ github.event.pull_request.number }}" \
              --add-label "security,high-priority,breaking-change"
          else
            comment_body="⚠️ **メジャーバージョン更新検出**

            この更新はメジャーバージョンアップのため、手動レビューが必要です。

            **更新内容:**
            - 依存関係: ${{ steps.metadata.outputs.dependency-names }}
            - 更新タイプ: ${{ steps.metadata.outputs.update-type }}

            問題がなければ手動でマージしてください。"

            gh pr edit "${{ github.event.pull_request.number }}" \
              --add-label "breaking-change,manual-review"
          fi

          gh pr comment "${{ github.event.pull_request.number }}" --body "$comment_body"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
