name: Dependabot Security Monitor

on:
  schedule:
    # 毎日午前8時（JST）にセキュリティ状況をチェック
    - cron: '0 23 * * *'  # UTC 23:00 = JST 08:00
  workflow_dispatch:
    inputs:
      force_check:
        description: '強制的にセキュリティチェックを実行'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  security-events: read
  issues: write
  pull-requests: read

jobs:
  security-status-check:
    name: Security Status Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup UV environment
      uses: ./.github/actions/setup-uv-env
      with:
        python-version: '3.11'

    - name: Check for open security advisories
      id: security-advisories
      run: |
        echo "=== セキュリティアドバイザリチェック ==="

        # GitHub CLIを使用してセキュリティアドバイザリを確認
        advisories=$(gh api repos/:owner/:repo/security-advisories --jq '.[] | select(.state == "published")')

        if [[ -n "$advisories" ]]; then
          echo "open-advisories=true" >> $GITHUB_OUTPUT
          echo "🚨 オープンなセキュリティアドバイザリが見つかりました"
        else
          echo "open-advisories=false" >> $GITHUB_OUTPUT
          echo "✅ オープンなセキュリティアドバイザリはありません"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check pending Dependabot PRs
      id: pending-prs
      run: |
        echo "=== 保留中のDependabot PRチェック ==="

        # Dependabotによる保留中のPRを確認
        pending_prs=$(gh pr list --author "dependabot[bot]" --state open --json number,title,labels)
        security_prs=$(echo "$pending_prs" | jq '[.[] | select(.labels[]?.name == "security")]')

        pr_count=$(echo "$pending_prs" | jq 'length')
        security_pr_count=$(echo "$security_prs" | jq 'length')

        echo "pending-pr-count=$pr_count" >> $GITHUB_OUTPUT
        echo "security-pr-count=$security_pr_count" >> $GITHUB_OUTPUT

        echo "保留中のDependabot PR: $pr_count 件"
        echo "セキュリティ関連PR: $security_pr_count 件"

        if [[ "$security_pr_count" -gt 0 ]]; then
          echo "security-prs-pending=true" >> $GITHUB_OUTPUT
          echo "🔴 セキュリティ関連のPRが保留中です"
        else
          echo "security-prs-pending=false" >> $GITHUB_OUTPUT
          echo "✅ セキュリティ関連のPRはありません"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run dependency vulnerability scan
      id: vulnerability-scan
      run: |
        echo "=== 依存関係脆弱性スキャン ==="

        # uvを使用して依存関係の脆弱性をチェック
        uv sync --dev

        # Safetyを使用したセキュリティチェック（存在する場合）
        if command -v safety &> /dev/null; then
          safety_result=$(uv run safety check --json || echo "[]")
          vulnerability_count=$(echo "$safety_result" | jq 'length')
        else
          vulnerability_count=0
        fi

        echo "vulnerability-count=$vulnerability_count" >> $GITHUB_OUTPUT

        if [[ "$vulnerability_count" -gt 0 ]]; then
          echo "vulnerabilities-found=true" >> $GITHUB_OUTPUT
          echo "🚨 $vulnerability_count 件の脆弱性が見つかりました"
        else
          echo "vulnerabilities-found=false" >> $GITHUB_OUTPUT
          echo "✅ 脆弱性は見つかりませんでした"
        fi

    - name: Generate security status report
      id: status-report
      run: |
        echo "=== セキュリティ状況レポート生成 ==="

        current_date=$(date '+%Y-%m-%d %H:%M:%S JST')

        # レポート内容の生成
        report="# 🔒 セキュリティ状況レポート

        **生成日時:** $current_date

        ## 📊 現在の状況

        ### セキュリティアドバイザリ
        - オープンなアドバイザリ: ${{ steps.security-advisories.outputs.open-advisories == 'true' && '🔴 あり' || '✅ なし' }}

        ### Dependabot PR
        - 保留中のPR総数: ${{ steps.pending-prs.outputs.pending-pr-count }} 件
        - セキュリティ関連PR: ${{ steps.pending-prs.outputs.security-pr-count }} 件

        ### 依存関係脆弱性
        - 検出された脆弱性: ${{ steps.vulnerability-scan.outputs.vulnerability-count }} 件

        ## 🎯 推奨アクション"

        # 推奨アクションの追加
        if [[ "${{ steps.security-advisories.outputs.open-advisories }}" == "true" ]] || \
           [[ "${{ steps.pending-prs.outputs.security-prs-pending }}" == "true" ]] || \
           [[ "${{ steps.vulnerability-scan.outputs.vulnerabilities-found }}" == "true" ]]; then
          report="$report

        ⚠️ **即座の対応が必要です:**
        - セキュリティ関連のPRを優先的にレビュー
        - 脆弱性のある依存関係を更新
        - セキュリティテストの実行"
        else
          report="$report

        ✅ **現在のセキュリティ状況は良好です:**
        - 定期的な監視を継続
        - 依存関係の最新状態を維持"
        fi

        # レポートをファイルに保存
        echo "$report" > security-status-report.md
        echo "report-generated=true" >> $GITHUB_OUTPUT

    - name: Create or update security status issue
      if: |
        steps.security-advisories.outputs.open-advisories == 'true' ||
        steps.pending-prs.outputs.security-prs-pending == 'true' ||
        steps.vulnerability-scan.outputs.vulnerabilities-found == 'true'
      run: |
        echo "=== セキュリティ状況イシューの作成/更新 ==="

        # 既存のセキュリティ状況イシューを検索
        existing_issue=$(gh issue list --label "security-status" --state open --json number | jq -r '.[0].number // empty')

        report_content=$(cat security-status-report.md)

        if [[ -n "$existing_issue" ]]; then
          # 既存イシューを更新
          gh issue edit "$existing_issue" --body "$report_content"
          echo "✅ 既存のセキュリティ状況イシュー #$existing_issue を更新しました"
        else
          # 新しいイシューを作成
          gh issue create \
            --title "🔒 セキュリティ状況監視レポート" \
            --body "$report_content" \
            --label "security-status,monitoring,automated" \
            --assignee "scottlz0310"
          echo "✅ 新しいセキュリティ状況イシューを作成しました"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Close security status issue if all clear
      if: |
        steps.security-advisories.outputs.open-advisories == 'false' &&
        steps.pending-prs.outputs.security-prs-pending == 'false' &&
        steps.vulnerability-scan.outputs.vulnerabilities-found == 'false'
      run: |
        echo "=== セキュリティ状況良好 - イシューのクローズ確認 ==="

        # 既存のオープンなセキュリティ状況イシューを検索
        existing_issue=$(gh issue list --label "security-status" --state open --json number | jq -r '.[0].number // empty')

        if [[ -n "$existing_issue" ]]; then
          # セキュリティ状況が良好な場合はイシューをクローズ
          gh issue close "$existing_issue" --comment "✅ セキュリティ状況が改善されました。すべてのセキュリティ問題が解決されています。

          **確認済み項目:**
          - セキュリティアドバイザリ: なし
          - セキュリティ関連PR: なし
          - 依存関係脆弱性: なし

          定期監視は継続されます。"
          echo "✅ セキュリティ状況イシュー #$existing_issue をクローズしました"
        else
          echo "✅ セキュリティ状況は良好です（オープンなイシューなし）"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "=== セキュリティ監視サマリー ==="
        echo "🔍 **実行された監視項目:**"
        echo "- セキュリティアドバイザリチェック"
        echo "- Dependabot PRステータス確認"
        echo "- 依存関係脆弱性スキャン"
        echo ""
        echo "📊 **結果:**"
        echo "- セキュリティアドバイザリ: ${{ steps.security-advisories.outputs.open-advisories == 'true' && '🔴 要対応' || '✅ 正常' }}"
        echo "- セキュリティPR: ${{ steps.pending-prs.outputs.security-prs-pending == 'true' && '🔴 要対応' || '✅ 正常' }}"
        echo "- 依存関係脆弱性: ${{ steps.vulnerability-scan.outputs.vulnerabilities-found == 'true' && '🔴 要対応' || '✅ 正常' }}"
        echo ""
        echo "次回監視: 明日 08:00 JST"
