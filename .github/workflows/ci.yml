name: CI/CD Pipeline

run-name: "CI/CD Pipeline - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.number) || github.ref_name }}"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時（UTC）に拡張マトリックステスト実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope (basic/extended/quality-gate)'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - extended
        - quality-gate
      python_versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.11,3.12,3.13'
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

jobs:
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: cross-platform-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv --python 3.11

    - name: Install dependencies
      run: |
        # 開発依存をインストール
        uv sync --dev
        # セキュリティ依存関係グループをインストール
        uv sync --group security || echo "Security group installation failed, continuing..."

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  cross-platform-test:
    name: Cross-platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
        include:
          # Python 3.14rc先行テスト（Linux/macOSのみ）
          - os: ubuntu-latest
            python-version: "3.14"
            experimental: true
          - os: macos-latest
            python-version: "3.14"
            experimental: true
      fail-fast: false

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}

    env:
      CI: "true"
      MULTIPLATFORM_TESTS: "true"
      PLATFORM_SPECIFIC_TESTS: "true"
      COVERAGE_PLATFORM: ${{ matrix.os }}
      COVERAGE_PYTHON: ${{ matrix.python-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true



    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install dependencies with retry (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Windows環境での依存関係インストール（リトライ機能付き）
        $maxRetries = 3
        $retryDelay = 5
        $ErrorActionPreference = "Continue"
        $success = $false

        for ($i = 1; $i -le $maxRetries; $i++) {
          Write-Host "Attempting to install dependencies (attempt $i/$maxRetries)" -ForegroundColor Yellow

          # 開発依存をインストール
          & uv sync --dev
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Dependencies installed successfully" -ForegroundColor Green
            $success = $true
            break
          } else {
            Write-Host "Dependency installation failed (attempt $i/$maxRetries) with exit code: $LASTEXITCODE" -ForegroundColor Yellow

            if ($i -eq $maxRetries) {
              Write-Host "Dependency installation failed after $maxRetries attempts" -ForegroundColor Red
              exit 1
            }

            Write-Host "Waiting $retryDelay seconds before retry..." -ForegroundColor Yellow
            Start-Sleep -Seconds $retryDelay
          }
        }

        if (-not $success) {
          Write-Host "Failed to install dependencies after all retries" -ForegroundColor Red
          exit 1
        }

    - name: Install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        # Unix系でのリトライ機能付きインストール
        for i in {1..3}; do
          if uv sync --dev; then
            echo "依存関係のインストールが成功しました"
            break
          else
            echo "依存関係のインストールが失敗しました (試行 $i/3)"
            if [ $i -eq 3 ]; then
              echo "依存関係のインストールが3回失敗しました"
              exit 1
            fi
            sleep 5
          fi
        done

    - name: Run comprehensive test suite (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Windows environment detected - running tests without parallel execution" -ForegroundColor Yellow
        Write-Host "Note: pytest-xdist is disabled on Windows due to worker crash issues" -ForegroundColor Yellow

        # 環境変数設定
        $env:CI = "true"
        $env:MULTIPLATFORM_TESTS = "true"
        $env:PLATFORM_SPECIFIC_TESTS = "true"
        $env:PRE_COMMIT = "1"
        $env:PYTHONUNBUFFERED = "1"

        # テストを直列実行（並列実行なし）
        Write-Host "Running tests in serial mode (no parallel execution)" -ForegroundColor Cyan

        & uv run pytest tests/ `
          --capture=sys `
          --cov=src/setup_repo `
          --cov-report=term-missing `
          --cov-report=html `
          --cov-report=xml `
          --cov-config=pyproject.toml `
          --junit-xml=test-results.xml `
          --json-report `
          --json-report-file=test-report.json `
          -v --tb=short `
          -x --maxfail=10 `
          -m "not performance and not stress" `
          --ignore=tests/performance/ `
          --disable-warnings `
          --timeout=120 `
          -o addopts=""

        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Windows tests completed successfully (serial mode)" -ForegroundColor Green
        } else {
          Write-Host "❌ Windows tests failed" -ForegroundColor Red
          exit 1
        }

        # CLIヘルプテスト
        Write-Host "Testing CLI help command" -ForegroundColor Cyan
        & uv run python main.py --help | Out-Null
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ CLI help test passed" -ForegroundColor Green
        } else {
          Write-Host "❌ CLI help test failed" -ForegroundColor Red
          exit 1
        }

    - name: Run comprehensive test suite (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "包括的テストスイートを開始します（Unix系環境）"
        set -e  # エラー時に即座に終了

        # 環境変数設定
        export CI="true"
        export MULTIPLATFORM_TESTS="true"
        export PLATFORM_SPECIFIC_TESTS="true"
        export PRE_COMMIT="1"
        EXIT_CODE=0

        # 全テスト実行（パフォーマンステストを除く）
        echo "包括的テストスイートを実行します（パフォーマンステストを除く）"
        if ! uv run pytest tests/ \
          --cov=src/setup_repo \
          --cov-report=term-missing \
          --cov-report=html \
          --cov-report=xml \
          --cov-config=pyproject.toml \
          --junit-xml=test-results.xml \
          --json-report \
          --json-report-file=test-report.json \
          -v --tb=short \
          -x --maxfail=10 \
          -m "not performance and not stress" \
          --ignore=tests/performance/ \
          --disable-warnings \
          --timeout=120 \
          -n auto \
          --dist=worksteal; then
          echo "❌ 単体テストが失敗しました"
          EXIT_CODE=1
        fi

        # CLIヘルプテスト
        echo "CLIヘルプテストを実行します"
        if ! uv run python main.py --help; then
          echo "❌ CLIヘルプテストが失敗しました"
          EXIT_CODE=1
        fi

        if [ $EXIT_CODE -ne 0 ]; then
          echo "❌ テストが失敗しました (終了コード: $EXIT_CODE)"
          exit $EXIT_CODE
        else
          echo "✅ 全てのテストが成功しました"
        fi

    - name: Upload test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml
          .coverage
        retention-days: 30

    - name: Verify platform detection (quick check)
      run: |
        echo "::group::プラットフォーム検出確認"
        echo "✅ マルチプラットフォームテストが成功したため、プラットフォーム検出は正常に動作しています"
        echo "📋 実行環境: ${{ matrix.os }} / Python ${{ matrix.python-version }}"
        echo "🔧 CI環境: ${{ runner.os }}"

        # プラットフォーム情報を簡易取得
        uv run python -c "
        try:
            from src.setup_repo.platform_detector import PlatformDetector
            detector = PlatformDetector()
            info = detector.get_platform_info()
            print('💻 検出されたプラットフォーム: ' + info.display_name)
            print('🐚 シェル: ' + info.shell)
            print('📦 パッケージマネージャー: ' + ', '.join(info.package_managers))
        except Exception as e:
            print('⚠️ プラットフォーム情報取得エラー: ' + str(e))
            print('ℹ️ テストが成功しているため、機能は正常です')
        "

        echo "::endgroup::"



  extended-matrix-test:
    name: Extended Matrix Test
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_scope == 'extended')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          - os: ubuntu-latest
            python-version: "3.14"
            experimental: true
          - os: windows-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.14"
            experimental: true
      fail-fast: false
      max-parallel: 6

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run comprehensive tests with coverage
      run: |
        echo "Running comprehensive extended matrix tests with coverage..."

        # 全テスト実行（パフォーマンステスト含む）
        uv run pytest tests/ \
          --cov=src/setup_repo \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-config=pyproject.toml \
          --junit-xml=test-results.xml \
          -v --tb=short \
          -x --maxfail=10 \
          --disable-warnings \
          --timeout=120 \
          -n auto \
          --dist=worksteal

        # メインスクリプトヘルプテスト
        echo "Testing main script help..."
        uv run python main.py --help
      shell: bash

    - name: Upload extended test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: extended-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
          .coverage
        retention-days: 30

    - name: Test platform-specific functionality
      run: |
        echo "Testing platform-specific functionality..."
        uv run python -c "
        try:
            from setup_repo.platform_detector import detect_platform
            platform = detect_platform()
            print(f'Platform: {platform.name} - {platform.display_name}')
            print(f'Shell: {platform.shell}')
            print(f'Python command: {platform.python_cmd}')
            print('✅ Platform detection successful')
        except Exception as e:
            print(f'❌ Platform detection failed: {e}')
            import sys
            sys.exit(1)
        "

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_scope == 'quality-gate')
    env:
      PYTHON_VERSION: "3.11"
      COVERAGE_THRESHOLD: "70"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Create virtual environment
      run: uv venv --python ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with reproducibility check
      run: |
        uv sync --dev
        if ! uv lock --check; then
          echo "❌ uv.lockファイルが最新ではありません"
          exit 1
        fi
        echo "✅ 依存関係の再現性が確認されました"

    - name: Run quality checks in parallel
      run: |
        echo "=== Parallel Quality Checks ==="

        # Ruff checks
        uv run ruff check . --output-format=github &
        RUFF_PID=$!

        # Format checks
        uv run ruff format --check . &
        FORMAT_PID=$!

        # Type checks
        uv run mypy src/ &
        MYPY_PID=$!

        # Wait for all checks
        wait $RUFF_PID && echo "✅ Ruff lint完了" || { echo "❌ Ruff lint失敗"; exit 1; }
        wait $FORMAT_PID && echo "✅ Format check完了" || { echo "❌ Format check失敗"; exit 1; }
        wait $MYPY_PID && echo "✅ MyPy完了" || { echo "❌ MyPy失敗"; exit 1; }

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ \
          --cov=src/setup_repo \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-config=pyproject.toml \
          --junit-xml=test-results.xml \
          --json-report \
          --json-report-file=test-report.json \
          -v --tb=short \
          -x --maxfail=5 \
          --disable-warnings \
          --timeout=120 \
          -n auto \
          --dist=worksteal
        echo "✅ テスト+カバレッジチェック完了（pyproject.toml設定準拠）"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: cross-platform-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment
      run: uv venv --python 3.11

    - name: Install dependencies
      run: |
        # 開発依存をインストール
        uv sync --dev

        # セキュリティ依存関係グループをインストール（フォールバック付き）
        echo "セキュリティツールのインストールを試行します..."
        if ! uv sync --group security; then
          echo "セキュリティグループのインストールに失敗しました。個別インストールを試行します..."

          # 個別にセキュリティツールをインストール（フォールバック）
          uv add bandit || echo "Banditのインストールに失敗しました"
          uv add safety || echo "Safetyのインストールに失敗しました"
        else
          echo "セキュリティグループのインストールに成功しました"
        fi

    - name: Run comprehensive security scan
      run: |
        echo "統合セキュリティスキャンを実行します..."

        # セキュリティツールの利用可能性を確認
        echo "セキュリティツールの利用可能性を確認します:"
        BANDIT_AVAILABLE=false
        SAFETY_AVAILABLE=false

        if uv run bandit --version >/dev/null 2>&1; then
          echo "- Bandit: 利用可能"
          BANDIT_AVAILABLE=true
        else
          echo "- Bandit: 利用不可"
        fi

        if uv run safety --version >/dev/null 2>&1; then
          echo "- Safety: 利用可能"
          SAFETY_AVAILABLE=true
        else
          echo "- Safety: 利用不可"
        fi

        # Banditスキャンを実行（pyproject.toml設定準拠）
        if [ "$BANDIT_AVAILABLE" = "true" ]; then
          echo "Banditセキュリティスキャンを実行します（pyproject.toml設定準拠）..."
          BANDIT_ARGS=$(uv run python -c "from scripts.security_config import generate_bandit_args; print(' '.join(generate_bandit_args()))" 2>/dev/null || echo "-r src/ -f json")
          uv run bandit $BANDIT_ARGS -o bandit-report.json || echo "Banditスキャンが警告付きで終了しました"
        else
          echo "Banditが利用できないため、スキップします"
        fi

        # Safetyチェックを実行（pyproject.toml設定準拠）
        if [ "$SAFETY_AVAILABLE" = "true" ]; then
          echo "Safety依存関係チェックを実行します（pyproject.toml設定準拠）..."
          SAFETY_ARGS=$(uv run python -c "from scripts.security_config import generate_safety_args; print(' '.join(generate_safety_args()))" 2>/dev/null || echo "check --json --output safety-report.json")
          uv run safety $SAFETY_ARGS || echo "Safetyチェックが警告付きで終了しました"
        else
          echo "Safetyが利用できないため、スキップします"
        fi

        # ツールが利用できない場合のメッセージ
        if [ "$BANDIT_AVAILABLE" = "false" ] && [ "$SAFETY_AVAILABLE" = "false" ]; then
          echo "警告: セキュリティツールが利用できません。CI環境では依存関係のインストールに失敗することがあります。"
          echo "セキュリティスキャンをスキップします。"
        else
          echo "セキュリティスキャンが完了しました。"
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [cross-platform-test]
    if: always()
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0



      - name: Download cross-platform test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "cross-platform-test-results-*"
          path: test-artifacts/
          merge-multiple: false
        continue-on-error: true

      - name: List test artifacts
        run: |
          echo "📁 テストアーティファクト一覧:"
          find test-artifacts/ -name "*.xml" -type f | head -10
          echo "総XMLファイル数: $(find test-artifacts/ -name "*.xml" -type f | wc -l)"

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: "test-artifacts/**/test-results.xml"
          reporter: java-junit
          fail-on-error: false
          only-summary: false
