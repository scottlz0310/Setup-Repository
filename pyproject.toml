[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "setup-repository"
version = "1.1.0"
description = "🚀 クロスプラットフォーム対応のGitHubリポジトリセットアップ・同期ツール"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Setup Repository Contributors"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Version Control :: Git",
]
requires-python = ">=3.9"
dependencies = [
    "rg>=0.0.75",
    "requests>=2.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "coverage>=7.0",
    "pre-commit>=3.0",
]

[project.scripts]
setup-repo = "setup_repo.cli:main"

[project.urls]
Homepage = "https://github.com/scottlz0310/Setup-Repository"
Repository = "https://github.com/scottlz0310/Setup-Repository"
Issues = "https://github.com/scottlz0310/Setup-Repository/issues"

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print (デバッグprint禁止)
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
]
ignore = [
    "T201",  # print文の使用を一時的に許可（段階的厳格化）
    "SIM108",  # 三項演算子の簡素化は自動修正不可のため一旦無効化
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["setup_repo"]
force-single-line = false
split-on-trailing-comma = true

[tool.hatch.build.targets.wheel]
packages = ["src/setup_repo"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false  # 段階的厳格化 - 初期段階では緩和
warn_unused_configs = true
disallow_untyped_defs = false  # 段階的厳格化 - 初期段階では緩和
disallow_any_unimported = false  # 段階的厳格化 - 初期段階では緩和
disallow_any_expr = false  # 段階的厳格化 - 初期段階では緩和
disallow_any_decorated = false  # 段階的厳格化 - 初期段階では緩和
disallow_any_explicit = false  # 段階的厳格化 - 初期段階では緩和
disallow_any_generics = false  # 段階的厳格化 - 初期段階では緩和
disallow_subclassing_any = false  # 段階的厳格化 - 初期段階では緩和
warn_redundant_casts = true
warn_unused_ignores = false  # CI/pre-commit環境の違いによる問題を回避
warn_no_return = true
warn_unreachable = true
strict_optional = false  # 段階的厳格化 - 初期段階では緩和
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false  # テストコードでは型チェックを緩和

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/setup_repo",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",  # 品質ゲート - 最低カバレッジ80%
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "stress: marks tests as stress tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src/setup_repo"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
# 品質ゲート設定
fail_under = 80
show_missing = true
skip_covered = false
skip_empty = false
precision = 2

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # 型チェック専用のインポート
    "if TYPE_CHECKING:",
    # プラットフォーム固有のコード
    "if platform.system\\(\\)",
    # デバッグ用コード
    "if __debug__:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Setup Repository Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = [
    "B101",  # assert_used - テストでのassert使用を許可
    "B603",  # subprocess_without_shell_equals_true - 必要な場合のsubprocess使用を許可
    "B607",  # start_process_with_partial_path - git, gh, uvなどの標準ツール使用を許可
    "B404",  # blacklist - subprocessモジュールの使用を許可（このツールの性質上必要）
    "B604",  # any_other_function_with_shell_equals_true - プラットフォーム検出での使用を許可
    "B310",  # blacklist - urllib.urlopen - HTTPS URLのみ使用でセキュリティ確保済み
    "B108",  # hardcoded_tmp_directory - tempfile.gettempdir()使用に修正済み
]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]


[[tool.uv.index]]
name = "safety"
url = "https://pkgs.safetycli.com/repository/scottlz-team/project/setup-repository/pypi/simple/"
default = false
[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=6.3.0",
    "pytest-xdist>=3.8.0",
    "pytest-json-report>=1.5.0", # パフォーマンステスト用JSONレポート
    "pytest-benchmark>=4.0.0", # ベンチマークテスト用
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "coverage>=7.6.0",
    "tomli-w>=1.0.0", # バージョン管理スクリプト用
    "psutil>=5.9.0", # パフォーマンス監視用
    "black>=25.1.0",
    "types-psutil>=7.0.0.20250822",
    "types-requests>=2.32.4.20250809",
]
security = [
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pip-licenses>=4.3.0",
    # semgrep>=1.45.0 - LGPLライセンスのため除外、代わりにCodeQLを使用
]
quality = [
    "pytest-json-report>=1.5.0",  # JSON形式のテストレポート生成
]
